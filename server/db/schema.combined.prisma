//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// schema.combined.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// schema.combined.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// schema.combined.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// schema.prisma
//

@@import("./models/Category.prisma")
@@import("./models/Tag.prisma")
@@import("./models/Questions.prisma")
@@import("./models/User.prisma")
@@import("./models/Session.prisma")
@@import("./models/VerificationToken.prisma")
@@import("./models/Media.prisma")
@@import("./models/Outbox.prisma")
@@import("./models/DevOpsMetric.prisma")

//
// schema.header.prisma
//

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// schema.prisma
//

@@import("./models/Category.prisma")
@@import("./models/Tag.prisma")
@@import("./models/Questions.prisma")
@@import("./models/User.prisma")
@@import("./models/Session.prisma")
@@import("./models/VerificationToken.prisma")
@@import("./models/Media.prisma")
@@import("./models/Outbox.prisma")
@@import("./models/DevOpsMetric.prisma")

//
// Category.prisma
//

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

//
// DevOpsMetric.prisma
//

model DevOpsMetric {
  id        String   @id @default(cuid())
  type      String
  payload   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// Media.prisma
//

model Media {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//
// Outbox.prisma
//

model Outbox {
  id        String   @id @default(cuid())
  to        String
  subject   String
  html      String   @db.Text
  retries   Int
  lastRetry DateTime
  error     String   @db.Text
  createdAt DateTime @default(now())
}

//
// Questions.prisma
//

model Question {
  id         String          @id
  title      String
  body       String
  difficulty Difficulty
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  tags       TagOnQuestion[]
  tagsText   String[]
  createdAt  DateTime        @default(now())

  @@index([difficulty])
  @@index([categoryId])
  @@index([tagsText], type: Gin)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

//
// Session.prisma
//

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//
// Tag.prisma
//

model Tag {
  id        String          @id @default(uuid())
  name      String          @unique
  questions TagOnQuestion[]
}

model TagOnQuestion {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

//
// User.prisma
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

//
// Users.prisma
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// VerificationToken.prisma
//

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// schema.header.prisma
//

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// schema.prisma
//

@@import("./models/Category.prisma")
@@import("./models/Tag.prisma")
@@import("./models/Questions.prisma")
@@import("./models/User.prisma")
@@import("./models/Session.prisma")
@@import("./models/VerificationToken.prisma")
@@import("./models/Media.prisma")
@@import("./models/Outbox.prisma")
@@import("./models/DevOpsMetric.prisma")

//
// Category.prisma
//

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

//
// DevOpsMetric.prisma
//

model DevOpsMetric {
  id        String   @id @default(cuid())
  type      String
  payload   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// Media.prisma
//

model Media {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//
// Outbox.prisma
//

model Outbox {
  id        String   @id @default(cuid())
  to        String
  subject   String
  html      String   @db.Text
  retries   Int
  lastRetry DateTime
  error     String   @db.Text
  createdAt DateTime @default(now())
}

//
// Questions.prisma
//

model Question {
  id         String          @id
  title      String
  body       String
  difficulty Difficulty
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  tags       TagOnQuestion[]
  tagsText   String[]
  createdAt  DateTime        @default(now())

  @@index([difficulty])
  @@index([categoryId])
  @@index([tagsText], type: Gin)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

//
// Session.prisma
//

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//
// Tag.prisma
//

model Tag {
  id        String          @id @default(uuid())
  name      String          @unique
  questions TagOnQuestion[]
}

model TagOnQuestion {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

//
// User.prisma
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

//
// Users.prisma
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// VerificationToken.prisma
//

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// schema.header.prisma
//

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// schema.prisma
//

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

model Tag {
  id        String          @id @default(uuid())
  name      String          @unique
  questions TagOnQuestion[]
}

model TagOnQuestion {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

model Question {
  id         String          @id
  title      String
  body       String
  difficulty Difficulty
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  tags       TagOnQuestion[]
  tagsText   String[]
  createdAt  DateTime        @default(now())

  @@index([difficulty])
  @@index([categoryId])
  @@index([tagsText], type: Gin)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Media {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Outbox {
  id        String   @id @default(cuid())
  to        String
  subject   String
  html      String   @db.Text
  retries   Int
  lastRetry DateTime
  error     String   @db.Text
  createdAt DateTime @default(now())
}

model DevOpsMetric {
  id        String   @id @default(cuid())
  type      String
  payload   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// Category.prisma
//

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

//
// DevOpsMetric.prisma
//

model DevOpsMetric {
  id        String   @id @default(cuid())
  type      String
  payload   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// Media.prisma
//

model Media {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//
// Outbox.prisma
//

model Outbox {
  id        String   @id @default(cuid())
  to        String
  subject   String
  html      String   @db.Text
  retries   Int
  lastRetry DateTime
  error     String   @db.Text
  createdAt DateTime @default(now())
}

//
// Questions.prisma
//

model Question {
  id         String          @id
  title      String
  body       String
  difficulty Difficulty
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id])
  tags       TagOnQuestion[]
  tagsText   String[]
  createdAt  DateTime        @default(now())

  @@index([difficulty])
  @@index([categoryId])
  @@index([tagsText], type: Gin)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

//
// Session.prisma
//

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//
// Tag.prisma
//

model Tag {
  id        String          @id @default(uuid())
  name      String          @unique
  questions TagOnQuestion[]
}

model TagOnQuestion {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

//
// User.prisma
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

//
// Users.prisma
//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// VerificationToken.prisma
//

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
