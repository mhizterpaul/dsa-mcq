// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Category {
    id String @id @default(uuid())
    name String @unique
    questions Question[]
}
model DevOpsMetric {
  id        String   @id @default(cuid())
  type      String
  payload   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Engagement {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  xp                      Int      @default(0)
  xp_weekly               Int      @default(0)
  xp_monthly              Int      @default(0)
  last_xp_reset_weekly    DateTime @default(now())
  last_xp_reset_monthly   DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
model Leaderboard {
  id                String  @id @default(cuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rank              Int
  userHighestBadge  String?
  xp                Int
}
model LearningSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Media {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider    String
  providerId  String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  type      String   // 'reminder' or 'nudge'
  isRead    Boolean  @default(false)
  sendAt    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Outbox {
  id        String   @id @default(cuid())
  to        String
  subject   String
  html      String   @db.Text
  retries   Int
  lastRetry DateTime
  error     String   @db.Text
  createdAt DateTime @default(now())
}
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Question {
  id                    String       @id @default(cuid())
  title                 String
  body                  String       @db.Text
  difficulty            Difficulty
  categoryId            String
  category              Category     @relation(fields: [categoryId], references: [id])
  tags                  TagOnQuestion[]
  tagsText              String[]
  successRate           Float        @default(0)
  totalSubmissions      Int          @default(0)
  totalAccepted         Int          @default(0)
  companyTags           String[]
  likes                 Int          @default(0)
  dislikes              Int          @default(0)
  hints                 String[]
  similarQuestionIds    String[]
  similarQuestionsText  String[]
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  userQuestionData      UserQuestionData[]
  quizQuestions         QuizQuestion[]

  @@index([difficulty])
  @@index([categoryId])
  @@index([tagsText], type: Gin)
}
model QuizSession {
  id          String   @id @default(cuid())
  date        DateTime @unique @db.Date
  startTime   DateTime
  endTime     DateTime?
  participants QuizParticipant[]
  questions   QuizQuestion[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuizParticipant {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String
  session     QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  score       Int         @default(0)
  streak      Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId, sessionId])
}

model QuizQuestion {
    id          String      @id @default(cuid())
    sessionId   String
    session     QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    questionId  String
    question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}
model Tag {
  id        String          @id @default(uuid())
  name      String          @unique
  questions TagOnQuestion[]
}

model TagOnQuestion {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  sessions          Session[]
  engagement        Engagement?
  leaderboard       Leaderboard?
  learningSessions  LearningSession[]
  userQuestionData  UserQuestionData[]
  notifications     Notification[]
  media             Media[]
  quizParticipants  QuizParticipant[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model UserQuestionData {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempts    Int      @default(0)
  correct     Boolean  @default(false)
  lastAttempt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, questionId])
}
